//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#pragma once

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#include "CANMessageBuffer.h"
#include "Semaphore.h"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#define IN_CAN0_RECEIVE_PORT_SECTION __attribute__((section ("teensy.CAN0.receive.ports.section")))
#define IN_CAN1_RECEIVE_PORT_SECTION __attribute__((section ("teensy.CAN1.receive.ports.section")))

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class CANReceivePort {

//······················································································································
//    Constructor
//······················································································································

  public: CANReceivePort (const uint32_t inIdentifier,
                          const tFrameFormat inFormat,
                          const uint16_t inBufferSize) ;

//······················································································································
//    Private properties
//······················································································································

  private: CANMessageBuffer mMessageBuffer ;
  private: Semaphore mSemaphore ;
  public: const uint32_t mIdentifier ;
  public: const uint16_t mBufferSize ;
  public: const tFrameFormat mFormat ;
  private: bool mOverflow ; // true if overflow occurs on append

//······················································································································
//    Init
//······················································································································

  public: void init (INIT_MODE) ;

//······················································································································
//    Append a value (done by CAN driver)
//······················································································································

  public: void append (IRQ_MODE_ const CANMessage & inMessage) ;

//······················································································································
//    Append did overflowed ?
//······················································································································

  public: bool appendDidOverflowed (void) const { return mOverflow ; }

//······················································································································
//    Retrieve a message
//······················································································································

  public: void get (USER_MODE_ CANMessage & outMessage) ;
  public: bool guarded_get (USER_MODE_ CANMessage & outMessage) ;

//······················································································································
//    No copy
//······················································································································

  private: CANReceivePort (const CANReceivePort &) = delete ;
  private: CANReceivePort & operator = (const CANReceivePort &) = delete ;

//······················································································································

} ;

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
